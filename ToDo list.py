lista_tareas = [] # Definici√≥n de lista vac√≠a ad√≥nde se guardar√°n las tareas. 

# Esta lista almacenar√° las tareas del usuario.
# Cada tarea ser√° un diccionario con los siguientes campos:
tarea = {  # Definici√≥n de tarea como diccionario:
    # 'id': Identificador √∫nico de la tarea.
    'id': 1, 
    'titulo': 'Estudiar Python', # T√≠tulo de la tarea.
    'descripcion': 'Aprender CRUD b√°sico', # Descripci√≥n de la tarea.
    'completada': False, # Estado de la tarea (completada o no).
    'fecha_creacion': '2025/01/15', # Fecha de creaci√≥n de la tarea.
    'fecha_limite': '2025-01-20' # Fecha l√≠mite para completar la tarea.
    } # Cerramos el diccionario de tarea.

# Variable para generar IDs √∫nicos
contador_id = 1

def mostrar_menu(): # Definici√≥n de funci√≥n para mostrar el men√∫ principal
    """Muestra el men√∫ principal de opciones"""
    print("\n=== LISTA DE TAREAS ===")
    print("1. Agregar tarea")
    print("2. Ver todas las tareas")
    print("3. Modificar tarea")
    print("4. Eliminar tarea")
    print("5. Salir")
    print("=" * 23)

def agregar_tarea(): # Definici√≥n de funci√≥n para agregar una nueva tarea
    """Agrega una nueva tarea a la lista"""
    global contador_id  # Necesitamos modificar esta variable globalmente
    
    # Pedimos los datos al usuario
    titulo = input("T√≠tulo de la tarea: ")
    descripcion = input("Descripci√≥n: ")
    fecha_limite = input("Fecha l√≠mite (YYYY-MM-DD) o Enter para omitir: ")
    
    # Crear el diccionario de la tarea
    nueva_tarea = {
        'id': contador_id,
        'titulo': titulo,
        'descripcion': descripcion,
        'completada': False,
        'fecha_creacion': '2025-01-15',  # Por ahora fijo
        'fecha_limite': fecha_limite if fecha_limite else None
    }
    
    # Agregar a la lista
    lista_tareas.append(nueva_tarea)
    contador_id += 1
    
    print(f"\nTarea '{titulo}' agregada correctamente!")
    pause = input("\nPresiona Enter volver al menu...")

def ver_tareas(): # Definici√≥n de funci√≥n para ver todas las tareas
    """Muestra todas las tareas en la lista"""
    #global lista_tareas  # Necesitamos acceder a la lista global
    # Primero verificamos si hay tareas
    if not lista_tareas:
        print("\nüìù No hay tareas en la lista.")
        return
    
    print(f"\nüìã LISTA DE TAREAS ({len(lista_tareas)} tareas)")
    print("=" * 50)
    
    # Recorremos cada tarea y la mostramos
    for tarea in lista_tareas:
        # S√≠mbolo seg√∫n el estado
        simbolo = "‚úÖ" if tarea['completada'] else "‚è≥"
        
        print(f"{simbolo} ID: {tarea['id']}")
        print(f"   T√≠tulo: {tarea['titulo']}")
        print(f"   Descripci√≥n: {tarea['descripcion']}")
        print(f"   Fecha creaci√≥n: {tarea['fecha_creacion']}")
        
        # Solo mostrar fecha l√≠mite si existe
        if tarea['fecha_limite']:
            print(f"   Fecha l√≠mite: {tarea['fecha_limite']}")
        
        print("-" * 30)

def main(): # Definici√≥n de la funci√≥n principal
    """Funci√≥n principal del programa"""
    while True: # Bucle infinito para mantener el programa en ejecuci√≥n
        mostrar_menu()
        opcion = input("Selecciona una opci√≥n (1-5): ")
        
        if opcion == "1":
            print("\nAgregar tarea\n") 
            agregar_tarea() # Llamar a la funci√≥n para agregar una tarea
        elif opcion == "2":
            ver_tareas() # Llamar a la funci√≥n para ver todas las tareas
            pause = input("\nPresiona Enter volver al menu...") # Pausa para que el usuario vea las tareas
        elif opcion == "3":
            print("\nFunci√≥n modificar tarea - por implementar")
        elif opcion == "4":
            print("\nFunci√≥n eliminar tarea - por implementar")
        elif opcion == "5":
            print("\nSaliendo del programa...") # Mensaje de salida
            # Aqu√≠ podr√≠amos guardar las tareas en un archivo si quisieramos persistencia
            # Por ahora solo salimos
            print("¬°Hasta luego!\n")
            break # Salir del bucle y terminar el programa
        else:
            print("Opci√≥n inv√°lida. Intenta de nuevo.") # Mensaje de error si la opci√≥n no es v√°lida

# Ejecutar el programa
if __name__ == "__main__": # Comprobar si el script se est√° ejecutando directamente
    print("Bienvenido a la lista de tareas") # Mensaje de bienvenida
    main() # Llamar a la funci√≥n principal para iniciar el programa